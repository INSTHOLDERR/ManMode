<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="/images/logo.ico" type="image/x-icon">
  <title>ManMode - Orders</title>

  <!-- Stylesheets -->
  <link rel="stylesheet" href="./css1/home.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">

  <!-- Inline Styles -->
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background-color: #f8f9fa;
    }

    .orders-section {
      padding: 20px 0;
    }

    .orders-section h2 {
      color: #333;
      font-weight: 600;
    }

    .table {
      background-color: white;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
    }

    .table thead {
      background-color: #f8f9fa;
    }

    .table thead th {
      border-bottom: 2px solid #dee2e6;
      font-weight: 600;
      color: #495057;
    }

    .table td,
    .table th {
      padding: 15px;
      vertical-align: middle;
    }

    .badge {
      padding: 8px 12px;
      font-size: 0.85rem;
      border-radius: 4px;
    }

    .badge-success {
      background-color: #28a745;
      color: white;
    }

    .badge-warning {
      background-color: #ffc107;
      color: #000;
    }

    .badge-danger {
      background-color: #dc3545;
      color: white;
    }

    /* Table wrapper for scrolling */
.table-wrapper {
  overflow-x: auto; /* Enable horizontal scrolling */
  border: 1px solid #ddd; /* Optional: For a boundary effect */
  border-radius: 4px; /* Optional: Smooth corners */
  padding: 5px; /* Optional: Add padding inside the wrapper */
}


.table {
  width: 100%;
  border-collapse: collapse;
  min-width: 800px; 
}

.table th,
.table td {
  border: 1px solid #ddd;
  padding: 10px;
  text-align: left;
}

@media (max-width: 945px) {
  .table-wrapper {
    overflow-x: scroll;
  }

  .table {
    width: auto; 
  }
}

  </style>
</head>

<body>

  <%- include('../common-ele/nav') %>

   
    <section class="orders-section">
      <div class="container my-4">
        <h2 class="text-center mb-4">Your Orders</h2>
      
        <div class="table-wrapper">
          <table class="table table-striped">
            <thead>
              <tr>
                <th scope="col">Order ID</th>
                <th scope="col">Ordered Date</th>
                <th scope="col">Total Amount</th>
                <th scope="col">Discount</th>
                <th scope="col">Payment Method</th>
                <th scope="col">Payment Status</th>
              </tr>
            </thead>
            <tbody id="ordersTable">
      
              <tr>
               
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </section>
    
    <!-- Footer -->
    <%- include('../common-ele/footer') %>

    
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.1/dist/sweetalert2.all.min.js"></script>
      <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
      <script src="/js/nav.js"></script>

      <script>
        document.addEventListener("DOMContentLoaded", async () => {
          const ordersTable = document.getElementById("ordersTable");

          try {
            const response = await fetch("/userorderhistorys");
            const data = await response.json();

            console.log("data",data);
            

            if (!response.ok || !data.success) {
              ordersTable.innerHTML = `<tr><td colspan="6" class="text-center">No orders found.</td></tr>`;
              return;
            }

            const sortedOrders = data.orders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

            sortedOrders.forEach((order) => {
              const orderRow = document.createElement("tr");
              orderRow.style.cursor = "pointer";
              orderRow.addEventListener("click", () => {
                window.location.href = `/orderhistory?orderId=${order._id}`;
              });

              const paymentStatusClass = order.paymentStatus === "Success" ? "text-success" : "text-danger";
              let paymentStatusContent = `<span class="${paymentStatusClass}">${order.paymentStatus}</span>`;

              if (order.paymentStatus === "Failed") {
                paymentStatusContent += `
    <button class="btn btn-warning btn-sm ms-2 retry-payment" 
      data-order-id="${order._id}" 
      data-amount="${order.totalAmount}">
      Retry Payment
    </button>`;
              }


              orderRow.innerHTML = `
            <td>${order._id}</td>
            <td>${new Date(order.createdAt).toLocaleDateString()}</td>
            <td>${order.totalAmount}</td>
            <td>${order.discount || "0"}</td>
            <td>${order.paymentMethod}</td>
            <td>${paymentStatusContent}</td>
          `;
              ordersTable.appendChild(orderRow);
            });

            document.querySelectorAll(".retry-payment").forEach((button) => {
              button.addEventListener("click", async (event) => {
                event.stopPropagation();
                const orderId = button.dataset.orderId;
                const orderAmount = button.dataset.amount;

                try {
                  const razorpayOrderResponse = await fetch("/createRazorpayOrder", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ amount: orderAmount }),
                  });

                  const razorpayOrder = await razorpayOrderResponse.json();

                  if (!razorpayOrderResponse.ok) {
                    throw new Error(razorpayOrder.message || "Failed to create Razorpay order.");
                  }

                  const options = {
                    key: "rzp_test_nFGQUv9h5ezSv8",
                    amount: razorpayOrder.amount,
                    currency: "INR",
                    name: "ManMode",
                    description: "Retry Payment",
                    order_id: razorpayOrder.id,
                    handler: async (response) => {
                      const retryResponse = await fetch("/retrypayment", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                          amount: orderAmount,
                          paymentId: response.razorpay_payment_id,
                          orderId,
                        }),
                      });

                      const retryData = await retryResponse.json();

                      if (!retryResponse.ok) {
                        throw new Error(retryData.message || "Failed to process retry payment.");
                      }

                      Swal.fire({
                        icon: "success",
                        title: "Retry Payment Success",
                        text: "Your payment was successful.",
                      }).then(() => {
                        window.location.reload();
                      });
                    },
                    prefill: {
                      name: "Your Name",
                      email: "your-email@example.com",
                      contact: "9999999999",
                    },
                    theme: { color: "#3399cc" },
                  };

                  const razorpay = new Razorpay(options);
                  razorpay.open();
                } catch (error) {
                  console.error("Error processing retry payment:", error);
                  Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: error.message || "Failed to process payment. Please try again.",
                  });
                }
              });
            });


          } catch (error) {
            console.error("Error fetching orders:", error);
            ordersTable.innerHTML = `<tr><td colspan="6" class="text-center">Failed to load orders.</td></tr>`;
          }
        });
      </script>
</body>

</html>