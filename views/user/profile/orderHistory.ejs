<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/logo.ico" type="image/x-icon">
    <title>ManMode </title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="./css1/home.css">
     <style>
        .order-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            background-color: #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .product-img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
        }

        .status-badge {
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.9em;
            font-weight: 500;
        }

        .status-delivered {
            background-color: #28a745;
            color: white;
        }

        .status-processing {
            background-color: #ffc107;
            color: black;
        }

        .status-cancelled {
            background-color: #dc3545;
            color: white;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .summary-card {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
        }

        .address-card {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>

<%- include('../common-ele/nav') %>

<div class="container my-5">
    <div class="row">
        <!-- Order Header -->
        <div class="col-12 mb-4">
            <h2 class="text-center mb-4">Order Details</h2>
            <div class="order-card">
                <h5 class="mb-3">Order ID: <span id="orderId"></span></h5>
                <p class="mb-2">Ordered Date: <span id="orderedDate"></span></p>
                <p class="mb-0">Payment Method: <span id="paymentMethod"></span></p>
            </div>
        </div>

        <!-- Shipping Address -->
        <div class="col-md-6 mb-4">
            <div class="address-card">
                <h5 class="mb-3">Shipping Address</h5>
                <div id="orderAddress"></div>
            </div>
        </div>

        <!-- Order Summary -->
        <div class="col-md-6 mb-4">
            <div class="summary-card">
                <h5 class="mb-3">Order Summary</h5>
                <div class="d-flex justify-content-between mb-2">
                    <span>Total Items:</span>
                    <span id="totalItems"></span>
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <span>Total Amount:</span>
                    <span>₹<span id="totalAmount"></span></span>
                </div>
            </div>
        </div>

        <!-- Order Items -->
        <div class="col-12">
            <div class="order-card">
                <h5 class="mb-4">Ordered Items</h5>
                <div id="orderItems"></div>
            </div>
        </div>
    </div>
</div>

<%- include('../common-ele/footer') %>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener("DOMContentLoaded", async () => {
    const params = new URLSearchParams(window.location.search);
    const orderId = params.get("orderId");

    if (!orderId) {
        showError("Order ID not found");
        return;
    }

    try {
        const response = await fetch(`/getorderdetails/${orderId}`);
        const data = await response.json();

        if (!response.ok || !data.success) {
            showError("Failed to load order details");
            return;
        }

        renderOrderDetails(data.order);
    } catch (error) {
        console.error("Error fetching order details:", error);
        showError("Failed to load order details");
    }
});

function renderOrderDetails(order) {
 
    document.getElementById("orderId").textContent = order._id;
    document.getElementById("orderedDate").textContent = new Date(order.createdAt).toLocaleDateString();
    document.getElementById("paymentMethod").textContent = order.paymentMethod;
    document.getElementById("totalAmount").textContent = order.totalAmount;
    document.getElementById("totalItems").textContent = order.orderedItems.length;

    // Address
    const address = order.addresses[0];
    document.getElementById("orderAddress").innerHTML = `
        <p class="mb-1">${address.address}</p>
        <p class="mb-1">${address.city}, ${address.state}</p>
        <p class="mb-0">${address.zipCode}</p>
    `;

 
    const orderItemsContainer = document.getElementById("orderItems");
    order.orderedItems.forEach((item, index) => {
        const itemElement = createOrderItemElement(item, order._id);
        if (index < order.orderedItems.length - 1) {
            itemElement.classList.add('mb-3', 'pb-3', 'border-bottom');
        }
        orderItemsContainer.appendChild(itemElement);
    });
}

function createOrderItemElement(item, orderId) {
    const div = document.createElement('div');
    div.className = 'row align-items-center';
    
    const isDelivered = item.status === "Delivered";
    const statusClass = getStatusClass(item.status);

    div.innerHTML = `
        <div class="col-md-2 mb-2 mb-md-0">
            <img src="http://localhost:3000/${item.productId.images[0].replace('uploads', '')}" 
                 alt="${item.productId.name}" 
                 class="product-img">
        </div>
        <div class="col-md-4 mb-2 mb-md-0">
            <h6 class="mb-1">${item.productId.name}</h6>
            <p class="mb-1">Size: ${item.size}</p>
            <p class="mb-0">Quantity: ${item.count}</p>
        </div>
        <div class="col-md-2 mb-2 mb-md-0">
            <p class="mb-0">₹${item.totalPrice}</p>
        </div>
        <div class="col-md-2 mb-2 mb-md-0">
            <span class="status-badge ${statusClass}">${item.status}</span>
        </div>
        <div class="col-md-2">
            <div class="action-buttons">
                ${getActionButtons(item, orderId)}
            </div>
        </div>
    `;

    
    setTimeout(() => {
        addButtonEventListeners(div, item, orderId);
    }, 0);

    return div;
}

function getStatusClass(status) {
    switch (status) {
        case 'Delivered':
            return 'status-delivered';
        case 'Cancelled':
            return 'status-cancelled';
        default:
            return 'status-processing';
    }
}

function getActionButtons(item, orderId) {
    const isDelivered = item.status === "Delivered";
    if (item.status === 'Cancelled') return '';
    
    if (isDelivered) {
        return `
            ${item.returnStatus === 'NotRequested' ? 
                `<button id="returnBtn-${item._id}" class="btn btn-warning btn-sm">Return</button>` :
                getReturnStatusButton(item.returnStatus)}
            <button id="invoiceBtn-${item._id}" class="btn btn-primary btn-sm">
                <i class="fas fa-download me-1"></i> Invoice
            </button>
        `;
    }
    
    return `<button id="cancelBtn-${item._id}" class="btn btn-danger btn-sm">Cancel</button>`;
}

function getReturnStatusButton(status) {
    switch (status) {
        case 'Requested':
            return '<button class="btn btn-secondary btn-sm" disabled>Return Requested</button>';
        case 'Approved':
            return '<button class="btn btn-success btn-sm" disabled>Return Approved</button>';
        case 'Rejected':
            return '<button class="btn btn-danger btn-sm" disabled>Return Rejected</button>';
        default:
            return '';
    }
}

function addButtonEventListeners(element, item, orderId) {
 
    const returnBtn = element.querySelector(`#returnBtn-${item._id}`);
    if (returnBtn) {
        returnBtn.addEventListener('click', () => handleReturn(orderId, item._id));
    }

    const invoiceBtn = element.querySelector(`#invoiceBtn-${item._id}`);
    if (invoiceBtn) {
        invoiceBtn.addEventListener('click', () => handleInvoiceDownload(orderId, item._id));
    }


    const cancelBtn = element.querySelector(`#cancelBtn-${item._id}`);
    if (cancelBtn) {
        cancelBtn.addEventListener('click', () => handleCancel(orderId, item._id));
    }
}

async function handleReturn(orderId, itemId) {
    const { value: reason } = await Swal.fire({
        title: 'Return Request',
        input: 'textarea',
        inputLabel: 'Please provide a reason for returning this item',
        inputPlaceholder: 'Enter your reason here...',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to provide a reason!';
            }
        }
    });

    if (reason) {
        try {
            const response = await fetch(`/requestReturn/${orderId}/${itemId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reason, status: 'Requested' })
            });

            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Return Requested',
                    text: 'Your return request has been submitted successfully.'
                }).then(() => location.reload());
            } else {
                throw new Error('Failed to request return');
            }
        } catch (error) {
            showError('Failed to submit return request');
        }
    }
}

async function handleInvoiceDownload(orderId, itemId) {
    try {
        const response = await fetch(`/generateInvoice/${orderId}/${itemId}`);
        if (!response.ok) throw new Error('Failed to generate invoice');

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `invoice-${itemId}.pdf`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    } catch (error) {
        showError('Failed to download invoice');
    }
}

async function handleCancel(orderId, itemId) {
    try {
        // Prompt user for a reason
        const { value: reason } = await Swal.fire({
            title: 'Return Request',
            input: 'textarea',
            inputLabel: 'Please provide a reason for canceling this item',
            inputPlaceholder: 'Enter your reason here...',
            showCancelButton: true,
            inputValidator: (value) => {
                if (!value) {
                    return 'You need to provide a reason!';
                }
            }
        });

        // If user cancels reason prompt
        if (!reason) {
            return; // Do nothing if no reason is provided
        }

        // Confirmation dialog
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        });

        if (result.isConfirmed) {
            // Send cancellation request to the backend
            const response = await fetch(`/cancelOrderItem/${orderId}/${itemId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reason }) // Pass the reason in the request body
            });

            if (response.ok) {
                // Show success message and reload
                Swal.fire(
                    'Cancelled!',
                    'Your order has been cancelled.',
                    'success'
                ).then(() => location.reload());
            } else {
                // Handle backend failure
                const errorData = await response.json();
                Swal.fire('Error!', errorData.message || 'Failed to cancel order.', 'error');
            }
        }
    } catch (error) {
        // Handle unexpected errors
        Swal.fire('Error!', 'Something went wrong. Please try again later.', 'error');
        console.error('Cancellation error:', error);
    }
}




function showError(message) {
    Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: message
    });
}
</script>

<script src="/js/nav.js"></script>
</body>
</html>