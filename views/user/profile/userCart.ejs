<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/logo.ico" type="image/x-icon">
    <title>ManMode</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

    <link rel="stylesheet" href="./css1/home.css">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f8f9fa;
        }

        .cart-container {
            min-height: 100vh;
            padding: 20px 0;
        }

        .cart-item {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }

        .cart-item:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .cart-item img {
            border-radius: 8px;
            object-fit: cover;
        }

        .quantity-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .quantity-btn {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: 1px solid #dee2e6;
            background: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .quantity-btn:hover {
            background: #f8f9fa;
            border-color: #0d6efd;
            color: #0d6efd;
        }

        .quantity-input {
            width: 50px;
            text-align: center;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 4px;
        }

        .total-card {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            position: sticky;
            top: 20px;
        }

        .checkout-btn {
            background: #0d6efd;
            border: none;
            padding: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .checkout-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(13, 110, 253, 0.2);
        }

        .remove-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            color: #dc3545;
            transition: all 0.2s ease;
        }

        .remove-btn:hover {
            color: #bb2d3b;
            transform: scale(1.1);
        }

        .empty-cart {
            text-align: center;
            padding: 40px 20px;
        }

        .empty-cart i {
            font-size: 48px;
            color: #6c757d;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <%- include('../common-ele/nav') %>
    <div class="container cart-container">
        <div class="row">
            <div class="col-md-8">
                <div class="d-flex align-items-center mb-4">
                    <i class="fas fa-shopping-cart me-2"></i>
                    <h4 class="mb-0">Your Cart</h4>
                </div>
                
         
                <div class="empty-cart d-none">
                    <i class="fas fa-shopping-basket"></i>
                    <h3>Your cart is empty</h3>
                    <p class="text-muted">Add items to your cart to proceed with checkout</p>
                    <a href="/viewallproducts" class="btn btn-primary mt-3">Browse Products</a>
                </div>

             
                <div id="cart-items"></div>
            </div>

            <div class="col-md-4">
                <div class="total-card p-4">
                    <h5 class="mb-3">Order Summary</h5>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal</span>
                        <span id="subtotal">₹0</span>
                    </div>
                    
                    <hr>
                    <div class="d-flex justify-content-between mb-4">
                        <strong>Total</strong>
                        <strong id="total-price">₹0</strong>
                    </div>
                    <button class="btn btn-primary checkout-btn w-100" id="checkout-button">
                        <i class="fas fa-lock me-2"></i>Proceed to Checkout
                    </button>
                </div>
            </div>
        </div>
    </div>


    <%- include('../common-ele/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
        let cartData = [];

        async function fetchCart() {
            try {
                const response = await fetch('/getusercart');
                if (!response.ok) throw new Error('Failed to fetch cart data.');
                const data = await response.json();
                cartData = data.cart;

                if (cartData.length === 0) {
                    document.querySelector('.empty-cart').classList.remove('d-none');
                } else {
                    document.querySelector('.empty-cart').classList.add('d-none');
                }

                renderCart(cartData);
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'An error occurred while fetching the cart.',
                });
                console.error('Error fetching cart:', error);
            }
        }

        function renderCart(cartItems) {
            const cartContainer = document.getElementById('cart-items');
            const totalElement = document.getElementById('total-price');
            const subtotalElement = document.getElementById('subtotal');
            let totalPrice = 0;

            cartContainer.innerHTML = '';
            cartItems.forEach((item, index) => {
                const { _id, productId, size, count, totalPrice: itemTotal, actualPrice } = item;
                const product = productId;
                totalPrice += itemTotal;

                cartContainer.innerHTML += `
                    <div class="cart-item position-relative p-3 mb-3">
                        <button class="remove-btn" onclick="removeItem('${_id}')">
                            <i class="fas fa-times"></i>
                        </button>
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <img src="http://manmode.uno/${product.images[0].replace('uploads', '')}" 
                                     alt="${product.name}" 
                                     class="img-fluid" 
                                     style="width: 100px; height: 100px;">
                            </div>
                            <div class="col-md-9">
                                <h5 class="mb-2">${product.name}</h5>
                                <p class="mb-2">Size: ${size}</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="quantity-control">
                                        <button class="quantity-btn" onclick="decrement(${index})">
                                            <i class="fas fa-minus"></i>
                                        </button>
                                        <input type="text" class="quantity-input" value="${count}" readonly>
                                        <button class="quantity-btn" onclick="increment(${index})">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>
                                    <div class="text-end">
                                        <p class="mb-1">Price: ₹${actualPrice}</p>
                                        <p class="mb-0"><strong>Total: ₹${itemTotal}</strong></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>`;
            });

            totalElement.textContent = `₹${totalPrice}`;
            subtotalElement.textContent = `₹${totalPrice}`;
        }

        async function increment(index) {
            cartData[index].count++;
            await updateCart(index);
        }

        async function decrement(index) {
            if (cartData[index].count > 1) {
                cartData[index].count--;
                await updateCart(index);
            }
        }

        async function updateCart(index) {
            try {
                const item = cartData[index];
                const response = await fetch('/updateCart', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ cartId: item._id, count: item.count }),
                });

                if (!response.ok) {
                    throw new Error('Failed to update cart');
                }

                await fetchCart();
            } catch (error) {
                console.log(error.message);
                
                Swal.fire({
                    icon: 'error',
                    title: 'Update Error!',
                    text: error.message || 'Failed to update cart. Please try again.',
                });
            }
        }

        async function removeItem(cartId) {
            try {
                const result = await Swal.fire({
                    icon: 'warning',
                    title: 'Remove Item',
                    text: 'Are you sure you want to remove this item from your cart?',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, remove it',
                    cancelButtonText: 'No, keep it'
                });

                if (result.isConfirmed) {
                    const response = await fetch('/removeCartItem', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ cartId }),
                    });

                    if (!response.ok) throw new Error('Failed to remove item');

                    const data = await response.json();
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Item Removed!',
                            text: 'The item has been removed from your cart.',
                            showConfirmButton: false,
                            timer: 1500
                        });
                        await fetchCart();
                    }
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'An error occurred while removing the item.',
                });
            }
        }


        document.addEventListener('DOMContentLoaded', fetchCart);


        document.getElementById('checkout-button').addEventListener('click', () => {
            if (cartData.length === 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Cart is Empty!',
                    text: 'Add items to your cart before proceeding to checkout.',
                });
            } else {
                window.location.href = '/usercheckout';
            }
        });
    </script>
    <script src="/js/nav.js"></script>
</body>
</html>