<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/logo.ico" type="image/x-icon">
    <title>ManMode</title>
    <link rel="stylesheet" href="./css1/home.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .wishlist-item {
            transition: all 0.3s ease;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .wishlist-item:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .size-btn {
            width: 40px;
            height: 40px;
            margin: 0 5px;
            border: 1px solid #dee2e6;
            background: white;
            transition: all 0.2s ease;
        }

        .size-btn:hover {
            border-color: #0d6efd;
        }

        .size-btn.active {
            background: #0d6efd;
            color: white;
            border-color: #0d6efd;
        }

        .product-image img {
            object-fit: cover;
            border-radius: 8px;
        }

        .add-to-cart-btn {
            transition: all 0.2s ease;
        }

        .add-to-cart-btn:hover {
            transform: translateY(-2px);
        }

      
        .empty-wishlist {
            text-align: center;
            padding: 40px 20px;
        }

        .empty-wishlist i {
            font-size: 48px;
            color: #6c757d;
            margin-bottom: 20px;
        }

        
        .loading-spinner {
            display: none;
            justify-content: center;
            padding: 40px;
        }

        .loading-spinner i {
            font-size: 24px;
            color: #0d6efd;
        }
    </style>
</head>
<body>
    <%- include('../common-ele/nav') %>
    

  
    <div class="container mt-5">
        <div class="d-flex align-items-center mb-4">
            <i class="fas fa-heart me-2"></i>
            <h2 class="mb-0">Your Wishlist</h2>
        </div>

        <div class="loading-spinner">
            <i class="fas fa-spinner fa-spin"></i>
        </div>

    
        <div class="empty-wishlist d-none">
            <i class="fas fa-heart-broken"></i>
            <h3>Your wishlist is empty</h3>
            <p class="text-muted">Add items to your wishlist to save them for later</p>
            <a href="/products" class="btn btn-primary">Browse Products</a>
        </div>

      
        <div id="wishlist-products"></div>
    </div>

    <%- include('../common-ele/footer') %>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        function showLoading() {
            document.querySelector('.loading-spinner').style.display = 'flex';
            document.getElementById('wishlist-products').style.display = 'none';
            document.querySelector('.empty-wishlist').classList.add('d-none');
        }

   
        function hideLoading() {
            document.querySelector('.loading-spinner').style.display = 'none';
        }

        async function fetchWishlist() {
            showLoading();
            try {
                const response = await fetch('/getwishlist');
                const data = await response.json();
                
                if (response.ok) {
                    if (data.length === 0) {
                        document.querySelector('.empty-wishlist').classList.remove('d-none');
                        document.getElementById('wishlist-products').style.display = 'none';
                    } else {
                        renderWishlist(data);
                        document.getElementById('wishlist-products').style.display = 'block';
                    }
                } else {
                    throw new Error(data.message || 'Error fetching wishlist');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Could not fetch wishlist items'
                });
            } finally {
                hideLoading();
            }
        }

        function renderWishlist(wishlist) {
            const container = document.getElementById('wishlist-products');
            container.innerHTML = wishlist.map(item => {
                const product = item.productId;
                const isOutOfStock = product.stock === 0;
                
                return `
                    <div class="wishlist-item mb-3 p-3">
                        <div class="d-flex align-items-center">
                            <div class="product-image">
                                <img src="http://localhost:5000/${product.images[0].replace('uploads', '')}" 
                                     alt="${product.name}" 
                                     class="img-fluid" 
                                     style="width: 100px; height: 100px;">
                            </div>
                            <div class="product-details ms-3 flex-grow-1">
                                <h5>${product.name}</h5>
                                <p class="mb-1">Price: â‚¹${product.offerPrice}</p>
                                <p class="mb-0 text-muted">${product.description}</p>
                            </div>
                            <div class="actions text-end">
                                ${isOutOfStock ? 
                                    '<p class="text-danger mb-2">Out of Stock</p>' : 
                                    `<div class="size-selection mb-2">
                                        <small class="d-block mb-1">Select Size:</small>
                                        <div class="size-buttons">
                                            ${Object.entries(product.sizes)
                                                .filter(([_, stock]) => stock > 0)
                                                .map(([size]) => `
                                                    <button class="size-btn" data-size="${size}">${size}</button>
                                                `).join('')}
                                        </div>
                                    </div>
                                    <button class="btn btn-primary add-to-cart-btn w-100 mb-2" data-id="${product._id}">
                                        <i class="fas fa-shopping-cart me-2"></i>Add to Cart
                                    </button>`
                                }
                                <button class="btn btn-outline-danger w-100" onclick="removeFromWishlist('${product._id}')">
                                    <i class="fas fa-trash-alt me-2"></i>Remove
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            // Setup size buttons and add to cart functionality
            setupEventListeners();
        }

        function setupEventListeners() {
          
            document.querySelectorAll('.size-btn').forEach(button => {
                button.addEventListener('click', function() {
                   
                    const parentSelection = this.closest('.size-selection');
                    parentSelection.querySelectorAll('.size-btn').forEach(btn => {
                        btn.classList.remove('active');
                    });
                 
                    this.classList.add('active');
                });
            });

        
            document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    const productId = this.dataset.id;
                    const sizeSelection = this.closest('.actions').querySelector('.size-btn.active');
                    
                    if (!sizeSelection) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Please select a size',
                            text: 'You must select a size before adding to cart'
                        });
                        return;
                    }

                    const size = sizeSelection.dataset.size;
                    
                    try {
                        const response = await fetch('/addtocart', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ productId, size })
                        });

                        const data = await response.json();
                        
                        if (response.ok) {

                            Swal.fire({
                                icon: 'success',
                                title: 'Added to Cart',
                                text: 'The item has been added to your cart',
                                        confirmButtonText: 'ok',
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            window.location.reload();
                                        }
                                    });
                          
                        } else {
                            throw new Error(data.message || 'Error adding to cart');
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.message || 'Could not add item to cart'
                        });
                    }
                });
            });
        }

        async function removeFromWishlist(productId) {
            try {
                const response = await fetch('/removewishlist', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId })
                });

                const data = await response.json();
                
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Removed',
                        text: 'Item removed from wishlist'
                    });
                    fetchWishlist();
                } else {
                    throw new Error(data.message || 'Error removing item');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Could not remove item from wishlist'
                });
            }
        }


        document.addEventListener('DOMContentLoaded', fetchWishlist);
    </script>

<script src="/js/nav.js"></script>
</body>
</html>