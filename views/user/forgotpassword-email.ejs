<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/logo.ico" type="image/x-icon">
    <title>ManMode</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- SweetAlert2 -->
    <style>
        #resend-otp {
            display: inline-block;
            margin-top: 10px;
            color: #007bff;
            text-decoration: underline;
            cursor: pointer;
            font-size: 14px;
        }

        #resend-otp:hover {
            color: #0056b3;
        }

        #otp-input {
            margin-top: 10px;
        }
    </style>
</head>

<body>
    <div class="register-container">
        <div class="register-left-section">
            <div class="register-left-forgot-section-inside"></div>
        </div>

        <div class="register-right-section">
            <div class="register-logo">
                <a href="/login" class="register-logo-text" style="text-decoration: none;"> 
                    ManMode
                </a>
            </div>


            <div class="register-header">
                <h2 class="register-title">Forgot Password</h2>
                <p class="register-subtitle"></p>
            </div>

            <form id="otp-form" class="register-form">
    
                <div class="register-form-group">
                    <input type="email" class="register-input-field" id="email" name="email" placeholder="Enter your email" required>
                </div>
  
                <button type="button" class="register-button" id="submit-button">Send OTP</button>
            </form>

            <div class="register-divider">Or Go Back</div>

            <div class="register-signup-prompt">
               Back to login? <a href="<%= '/login' %>" class="register-signup-link">Login</a>
               Back to Register? <a href="<%= '/register' %>" class="register-signup-link">Register</a>
            </div>
        </div>
    </div>

    <script>
 
 async function startOtpTimer(email, callback) {
    let timerInterval;
    let timeLeft = 60;

    const openOtpPopup = async () => {
        await Swal.fire({
            title: "Enter OTP",
            html: `<p>OTP has been sent to your email.</p>
                   <p><span id="otp-timer">00:${timeLeft}</span></p>
                   <input type="text" id="otp-input" class="swal2-input" placeholder="Enter OTP here">
                   <div id="resend-otp" style="display:none;">Resend OTP</div>`,
            preConfirm: async () => {
                const otp = document.getElementById('otp-input').value;
                if (!otp) {
                    Swal.showValidationMessage('Please enter the OTP');
                    return false;
                }
                return otp;
            },
            didOpen: async () => {
                const timerEl = document.getElementById("otp-timer");
                const resendLink = document.getElementById("resend-otp");

                timerInterval = setInterval(() => {
                    timeLeft--;
                    timerEl.textContent = `00:${timeLeft < 10 ? '0' : ''}${timeLeft}`;

                    if (timeLeft <= 0) {
                        clearInterval(timerInterval);
                        timerEl.textContent = "Time expired!";
                        resendLink.style.display = "block";
                    }
                }, 1000);

              
                resendLink.addEventListener("click", async () => {
                    resendLink.style.display = "none"; 
                    timeLeft = 60; 
                    timerEl.textContent = "00:60"; 

                    try {
                        const resendResponse = await fetch("/send-otp", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ email })
                        });

                        const resendResult = await resendResponse.json();
                        if (resendResponse.ok) {
                            Swal.fire({
                                title: "Success!",
                                text: "OTP sent again.",
                                icon: "success",
                                confirmButtonText: "OK"
                            });
                            clearInterval(timerInterval);
                            openOtpPopup();
                        } else {
                            throw new Error(resendResult.error || "Failed to resend OTP");
                        }
                    } catch (error) {
                        Swal.fire({
                            title: "Error!",
                            text: error.message,
                            icon: "error",
                            confirmButtonText: "OK"
                        });
                    }
                });
            },
            willClose: () => {
                clearInterval(timerInterval);
            }
        }).then(async (result) => {
            if (result.isConfirmed) {
                const otp = result.value;
                try {
                    const validateResponse = await fetch('/validate-otp', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, otp })
                    });

                    const validateResult = await validateResponse.json();
                    if (!validateResponse.ok) {
                        Swal.fire({
                            title: "Error!",
                            text: "Incorrect OTP. Please try again.",
                            icon: "error",
                            confirmButtonText: "OK"
                        });
                        openOtpPopup(); // Reopen OTP popup on wrong OTP
                    } else {
                        callback(otp); 
                    }
                } catch (error) {
                    Swal.fire({
                        title: "Error!",
                        text: error.message || "An error occurred during OTP validation.",
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                    openOtpPopup(); 
                }
            }
        });
    };

    openOtpPopup();
}

        function validateFormFields() {
            const email = document.getElementById("email").value.trim();
            if (!email) {
                Swal.fire({
                    title: "Error!",
                    text: "Please enter a valid email address.",
                    icon: "error",
                    confirmButtonText: "OK"
                });
                return false;
            }
            return true;
        }


        // submitting
        document.getElementById('submit-button').addEventListener('click', async function () {
            if (!validateFormFields()) return;

            const email = document.getElementById("email").value.trim();

            try {
                const otpResponse = await fetch("/forgot-send-otp", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ email })
                });

                if (!otpResponse.ok) {
                    const otpResult = await otpResponse.json();
                    throw new Error(otpResult.message || "Error sending OTP");
                }

              
                await startOtpTimer(email, async (otp) => {
                    const validateResponse = await fetch('/validate-otp', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, otp })
                    });

                    const validateResult = await validateResponse.json();
                    if (!validateResponse.ok) {
                        Swal.fire({
                            title: "Error!",
                            text: validateResult.error || "OTP validation failed",
                            icon: "error",
                            confirmButtonText: "OK"
                        });
                        return;
                    }

                    Swal.fire({
                        title: "Success!",
                        text: "OTP validated successfully.",
                        icon: "success",
                        confirmButtonText: "OK"
                    }).then(() => {
                
                window.location.href = "/forgot-password";
            });
                });
            } catch (error) {
                Swal.fire({
                    title: "Error!",
                    text: error.message,
                    icon: "error",
                    confirmButtonText: "OK"
                });
            }
        });
    </script>
</body>

</html>
