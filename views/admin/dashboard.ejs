<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/logo.ico" type="image/x-icon">
    <title>ManMode </title>
    <link rel="stylesheet" href="/admin/dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<style>
    .analytics-section {
        padding: 20px;
        margin-top: 20px;
    }

    .analytics-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        margin-top: 20px;
    }

    .chart-container {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        height: 500px;
    }

    .filter-section {
        margin-bottom: 20px;
    }

    .filter-section select {
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ddd;
        margin-left: 10px;
    }
</style>

<body>

    <%- include('./commonpages/sidebar') %>

     
        <div class="main-content">
            <div class="header">
                <h1>Dashboard</h1>
                <button class="logout-button">Logout</button>
            </div>

         
            <div class="cards-grid">
                <div class="card">
                    <div class="card-title">Total Sales</div>
                    <div class="card-value">â‚¹0</div>
                </div>
                <div class="card">
                    <div class="card-title">Total Orders</div>
                    <div class="card-value">0</div>
                </div>
                <div class="card">
                    <div class="card-title">Total Customers</div>
                    <div class="card-value">0</div>
                </div>
                <div class="card">
                    <div class="card-title">Orders List</div>
                    <div class="card-value">0</div>
                </div>
            </div>

     
            <div class="sales-report">
                <h3>Generate Sales Report</h3>
                <form id="sales-report-form">
                    <label for="report-type">Report Type:</label>
                    <select id="report-type" name="report-type">
                        <option value="">Select type</option>
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="custom">Custom Date Range</option>
                    </select>

                    <div id="custom-date-range" style="display: none;">
                        <label for="start-date">Start Date:</label>
                        <input type="date" id="start-date" name="startDate">
                        <label for="end-date">End Date:</label>
                        <input type="date" id="end-date" name="endDate">
                    </div>

                    <label for="report-format">Report Format:</label>
                    <select id="report-format" name="report-format">
                        <option value="excel">Excel</option>
                        <option value="pdf">PDF</option>
                    </select>

                    <button type="submit">Generate Report</button>

                </form>
                <div id="report-table-container"></div>
            </div>



       

            <div class="analytics-section">
              
                <div class="filter-section">
                    <label for="time-filter">Time Period:</label>
                    <select id="time-filter">
                        <option value="yearly">Yearly</option>
                        <option value="monthly">Monthly</option>
                        <option value="weekly">Weekly</option>
                        <option value="daily">Daily</option>
                    </select>
                </div>

              
                <div class="analytics-grid">
                   
                    <div class="chart-container">
                        <h3>Sales Overview</h3>
                        <canvas id="salesChart"></canvas>
                    </div>

                  
                    <div class="chart-container">
                        <h3>Top Products</h3>
                        <canvas id="topProductsChart"></canvas>
                    </div>

                    <!-- Top Categories Chart -->
                    <div class="chart-container">
                        <h3>Top Categories</h3>
                        <canvas id="topCategoriesChart"></canvas>
                    </div>

                 
                    <div class="chart-container">
                        <h3>Top Brands</h3>
                        <canvas id="topBrandsChart"></canvas>
                    </div>
                </div>
            </div>

        </div>



        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const reportTypeSelect = document.getElementById('report-type');
                const customDateRange = document.getElementById('custom-date-range');
                const reportTableContainer = document.getElementById('report-table-container');

                function formatCurrency(amount) {
                    return new Intl.NumberFormat('en-IN', {
                        style: 'currency',
                        currency: 'INR',
                        maximumFractionDigits: 0
                    }).format(amount);
                }

                function getTableHeaders(reportType) {
                    const commonHeaders = [
                        'Orders',
                        'Products Sold',
                        'Total Amount',
                        'Coupon Discount',
                        'Offer Discount'
                    ];

                    switch (reportType) {
                        case 'daily':
                            return ['Date', ...commonHeaders];
                        case 'weekly':
                            return ['Date Range', ...commonHeaders];
                        case 'monthly':
                            return ['Month', ...commonHeaders];
                        case 'custom':
                            return ['Date', ...commonHeaders];
                        default:
                            return [];
                    }
                }

                function createTableRow(data, reportType) {
                    let rowHtml = '<tr>';

                    switch (reportType) {
                        case 'daily':
                        case 'custom':
                            rowHtml += `
                            <td>${new Date(data.date).toLocaleDateString('en-US', {
                                weekday: 'short',
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                            })}</td>
                            <td>${data.orderCount}</td>
                            <td>${data.totalProducts}</td>
                            <td>${formatCurrency(data.totalAmount)}</td>
                            <td>${formatCurrency(data.couponDiscount || 0)}</td>
                            <td>${formatCurrency(data.offerDiscount || 0)}</td>
                        `;
                            break;
                        case 'weekly':
                        case 'monthly':
                            rowHtml += `
                            <td>${data.dateRange}</td>
                            <td>${data.orderCount}</td>
                            <td>${data.totalProducts}</td>
                            <td>${formatCurrency(data.totalAmount)}</td>
                            <td>${formatCurrency(data.couponDiscount)}</td>
                            <td>${formatCurrency(data.offerDiscount)}</td>
                        `;
                            break;
                    }

                    return rowHtml + '</tr>';
                }

                function renderSalesTable(data, reportType) {
                    const headers = getTableHeaders(reportType);
                    let tableHTML = `
                    <table class="sales-table">
                        <thead>
                            <tr>
                `;


                    headers.forEach(header => {
                        tableHTML += `<th>${header}</th>`;
                    });

                    tableHTML += `
                            </tr>
                        </thead>
                        <tbody>
                `;


                    data.forEach(item => {
                        tableHTML += createTableRow(item, reportType);
                    });

                    tableHTML += `
                        </tbody>
                    </table>
                `;

                    reportTableContainer.innerHTML = tableHTML;
                }

                reportTypeSelect.addEventListener('change', async function (e) {
                    const reportType = e.target.value;
                    customDateRange.style.display = reportType === 'custom' ? 'grid' : 'none';

                    if (!reportType) {
                        reportTableContainer.innerHTML = '';
                        return;
                    }

                    try {
                        let url = `/admin/sales-report/${reportType}`;
                        if (reportType === 'custom') {
                            const startDate = document.getElementById('start-date').value;
                            const endDate = document.getElementById('end-date').value;
                            if (!startDate || !endDate) return;
                            url += `?startDate=${startDate}&endDate=${endDate}`;
                        }

                        const response = await fetch(url);
                        const result = await response.json();

                        if (result.status === 'success') {
                            renderSalesTable(result.data, reportType);
                        } else {
                            throw new Error(result.message);
                        }
                    } catch (error) {
                        console.error('Error fetching sales report:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to fetch sales report'
                        });
                    }
                });

                document.getElementById('start-date').addEventListener('change', function () {
                    if (reportTypeSelect.value === 'custom' && document.getElementById('end-date').value) {
                        reportTypeSelect.dispatchEvent(new Event('change'));
                    }
                });

                document.getElementById('end-date').addEventListener('change', function () {
                    if (reportTypeSelect.value === 'custom' && document.getElementById('start-date').value) {
                        reportTypeSelect.dispatchEvent(new Event('change'));
                    }
                });
            });

            document.getElementById('sales-report-form').addEventListener('submit', async function (e) {
                e.preventDefault();

                const reportType = document.getElementById('report-type').value;
                const reportFormat = document.getElementById('report-format').value;

                try {
                    let url = `/admin/download-sales-report?reportType=${reportType}&format=${reportFormat}`;

                    if (reportType === 'custom') {
                        const startDate = document.getElementById('start-date').value;
                        const endDate = document.getElementById('end-date').value;
                        if (!startDate || !endDate) {
                            alert('Please select both start and end dates');
                            return;
                        }
                        url += `&startDate=${startDate}&endDate=${endDate}`;
                    }

                    window.location.href = url;
                } catch (error) {
                    console.error('Error downloading report:', error);
                    alert('Failed to download report');
                }
            });


            document.addEventListener('DOMContentLoaded', function () {

                let salesChart, productChart, categoryChart, brandChart;

                async function initializeDashboard() {
                    try {
                  
                        const statsResponse = await fetch('/admin/dashboard-stats');
                        const statsData = await statsResponse.json();

                        if (statsData.status === 'success') {
                            updateDashboardCards(statsData.data);
                        }
                        initializeCharts();
                        await fetchAndUpdateCharts('yearly');

               
                        document.getElementById('time-filter').addEventListener('change', async (e) => {
                            await fetchAndUpdateCharts(e.target.value);
                        });
                    } catch (error) {
                        console.error('Error initializing dashboard:', error);
                        showError('Failed to initialize dashboard');
                    }
                }

                function initializeCharts() {
  
                    const salesCtx = document.getElementById('salesChart').getContext('2d');
                    salesChart = new Chart(salesCtx, {
                        type: 'line',
                        data: {
                            labels: [],
                            datasets: [{
                                label: 'Sales (â‚¹)',
                                data: [],
                                borderColor: 'rgb(75, 192, 192)',
                                tension: 0.1
                            }, {
                                label: 'Orders',
                                data: [],
                                borderColor: 'rgb(255, 99, 132)',
                                tension: 0.1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });

                    const productsCtx = document.getElementById('topProductsChart').getContext('2d');
                    productChart = new Chart(productsCtx, {
                        type: 'bar',
                        data: {
                            labels: [],
                            datasets: [{
                                label: 'Units Sold',
                                data: [],
                                backgroundColor: 'rgba(54, 162, 235, 0.5)'
                            }]
                        },
                        options: {
                            indexAxis: 'y',
                            responsive: true,
                            maintainAspectRatio: false
                        }
                    });

         
                    const categoriesCtx = document.getElementById('topCategoriesChart').getContext('2d');
                    categoryChart = new Chart(categoriesCtx, {
                        type: 'pie',
                        data: {
                            labels: [],
                            datasets: [{
                                label: 'Top Categories',
                                data: [],
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.5)',
                                    'rgba(54, 162, 235, 0.5)',
                                    'rgba(255, 206, 86, 0.5)',
                                    'rgba(75, 192, 192, 0.5)',
                                    'rgba(153, 102, 255, 0.5)',
                                ]
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false
                        }
                    });

      
                    const brandsCtx = document.getElementById('topBrandsChart').getContext('2d');
                    brandChart = new Chart(brandsCtx, {
                        type: 'bar',
                        data: {
                            labels: [],
                            datasets: [{
                                label: 'Units Sold',
                                data: [],
                                backgroundColor: 'rgba(153, 102, 255, 0.5)'
                            }]
                        },
                        options: {
                            indexAxis: 'y',
                            responsive: true,
                            maintainAspectRatio: false
                        }
                    });
                }

                async function fetchAndUpdateCharts(timeFilter) {
                    try {
                        const response = await fetch(`/admin/dashboard-analytics?timeFilter=${timeFilter}`);
                        const data = await response.json();

                        console.log("data", data);

                        if (data.status === 'success') {
                            updateCharts(data.data);
                        } else {
                            throw new Error(data.message);
                        }
                    } catch (error) {
                        console.error('Error fetching analytics data:', error);
                        showError('Failed to fetch analytics data');
                    }
                }

                function updateCharts(data) {
          
                    salesChart.data.labels = data.salesData.map(item => getTimeLabel(item._id));
                    salesChart.data.datasets[0].data = data.salesData.map(item => item.totalSales);
                    salesChart.data.datasets[1].data = data.salesData.map(item => item.orderCount);
                    salesChart.update();

                    productChart.data.labels = data.topProducts.map(item => item.name);
                    productChart.data.datasets[0].data = data.topProducts.map(item => item.quantity);
                    productChart.update();


                    categoryChart.data.labels = data.topCategories.map(item => item.categoryName);
                    categoryChart.data.datasets[0].data = data.topCategories.map(item => item.quantity);
                    categoryChart.update();

                    brandChart.data.labels = data.topBrands.map(item => item.brandName);
                    brandChart.data.datasets[0].data = data.topBrands.map(item => item.quantity);
                    brandChart.update();
                }

                function updateDashboardCards(data) {
                    document.querySelector('.card:nth-child(1) .card-value').textContent =
                        `â‚¹${data.totalSales.toLocaleString()}`;
                    document.querySelector('.card:nth-child(2) .card-value').textContent =
                        data.totalOrders.toLocaleString();
                    document.querySelector('.card:nth-child(3) .card-value').textContent =
                        data.totalCustomers.toLocaleString();
                }

                function getTimeLabel(timeId) {
                    return timeId.toString();
                }

                function showError(message) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: message
                    });
                }

                initializeDashboard();
            });


            document.addEventListener('DOMContentLoaded', function() {
                async function fetchAndUpdateDashboard() {
    try {
        const response = await fetch('/admin/dashboard-data');

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        console.log(data);
        if (data && data.data) {
            updateDashboardCards(data.data);
        } else {
            throw new Error(data.message || 'Unexpected data structure');
        }
    } catch (error) {
        console.error('Error fetching dashboard data:', error.message);
      
    }
}

    function updateDashboardCards(data) {
       
        document.querySelector('[data-stat="total-sales"]').textContent = 
            `â‚¹${data.totalSales.toLocaleString()}`;

      
        document.querySelector('[data-stat="total-orders"]').textContent = 
            data.totalOrders.toLocaleString();

      
        document.querySelector('[data-stat="total-users"]').textContent = 
            data.totalUsers.toLocaleString();

     
        document.querySelector('[data-stat="orders-list"]').textContent = 
            data.totalOrdersList.toLocaleString(); 
    }

    function showError(message) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: message
        });
    }

    // Fetch and update the dashboard data
    fetchAndUpdateDashboard();
});



        </script>


</body>

</html>