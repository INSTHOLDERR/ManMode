<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/logo.ico" type="image/x-icon">
    <title>ManMode</title>
    <link rel="stylesheet" href="/admin/users.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>

<body>

    <%- include('./commonpages/sidebar') %>


    <div class="main-content">
        <div class="header">
            <h1>Users</h1>
            <button class="logout-button">Logout</button>
        </div>


        <div class="dashboard-top">
            <div class="search-bar">
                <i class="fas fa-search"></i>
                <input type="text" id="search-box" placeholder="Search users...">
            </div>

            <div class="summary-boxes">
                <div class="summary-box">
                    <h3>Total Users</h3>
                    <p>120</p>
                </div>
                <div class="summary-box">
                    <h3>Active Users</h3>
                    <p>98</p>
                </div>
                <div class="summary-box">
                    <h3>Blocked Users</h3>
                    <p>22</p>
                </div>
            </div>
        </div>



        <div class="user-table">
            <table>
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Date Joined</th>
                        <th>Status</th>
                        <!-- <th>Delete</th> -->
                    </tr>
                </thead>
                <tbody id="user-table-body">

                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Fetch users 
        async function fetchUsers() {
            try {
                const response = await fetch('/admin/users');
                const data = await response.json();

                if (data.success) {
                    const users = data.data;


                    document.querySelector('.summary-boxes .summary-box:nth-child(1) p').textContent = data.counts.total;
                    document.querySelector('.summary-boxes .summary-box:nth-child(2) p').textContent = data.counts.active;
                    document.querySelector('.summary-boxes .summary-box:nth-child(3) p').textContent = data.counts.blocked;

                    const tableBody = document.getElementById('user-table-body');
                    tableBody.innerHTML = '';


                    users.forEach(user => {
                     


                        const row = `
                            <tr>
                              <td>
  <img 
    src="${user.image ? `http://localhost:3000/uploaded-images/${user.image.replace('uploads', '')}` : 'https://via.placeholder.com/40'}" 
    alt="User Image" 
    class="user-image"
  >
</td>
                                <td>${user.name}</td>
                                <td>${user.email}</td>
                                <td>${new Date(user.createdAt).toLocaleDateString()}</td>
                                <td>
                                    <select class="status-select ${user.isActive ? 'active' : 'blocked'}" onchange="updateUserStatus('${user._id}', this.value)">
                                        <option value="active" ${user.isActive ? 'selected' : ''}>Active</option>
                                        <option value="blocked" ${!user.isActive ? 'selected' : ''}>Blocked</option>
                                    </select>
                                </td>
                            
                            </tr>
                        `;
                        tableBody.innerHTML += row;
                        // <td><i class="fas fa-trash delete-icon" onclick="deleteUser('${user._id}')"></i></td>
                    });
                } else {
                    console.error('Failed to fetch users:', data.message);
                }
            } catch (error) {
                console.error('Error fetching users:', error);
            }
        }

        // Update user status
        async function updateUserStatus(userId, status) {
            Swal.fire({
                title: 'Are you sure?',
                text: `Do you want to change the user status to ${status}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, update it!',
                cancelButtonText: 'Cancel',
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/users/${userId}/status`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ isActive: status === 'active' }),
                        });

                        const data = await response.json();
                        if (data.success) {
                            Swal.fire(
                                'Updated!',
                                `User status has been updated to ${status}.`,
                                'success'
                            );
                            fetchUsers();
                        } else {
                            Swal.fire(
                                'Error!',
                                'Failed to update user status. Please try again.',
                                'error'
                            );
                        }
                    } catch (error) {
                        console.error('Error updating user status:', error);
                        Swal.fire(
                            'Error!',
                            'An unexpected error occurred while updating the status.',
                            'error'
                        );
                    }
                }
            });
        }


        // Delete user 
        //         async function deleteUser(userId) {
        //     Swal.fire({
        //         title: 'Are you sure?',
        //         text: 'This action cannot be undone!',
        //         icon: 'warning',
        //         showCancelButton: true,
        //         confirmButtonColor: '#3085d6',
        //         cancelButtonColor: '#d33',
        //         confirmButtonText: 'Yes, delete it!',
        //         cancelButtonText: 'Cancel',
        //     }).then(async (result) => {
        //         if (result.isConfirmed) {
        //             try {
        //                 const response = await fetch(`/admin/deleteusers/${userId}`, { method: 'DELETE' });
        //                 const data = await response.json();

        //                 if (data.success) {
        //                     Swal.fire(
        //                         'Deleted!',
        //                         'The user has been deleted successfully.',
        //                         'success'
        //                     );
        //                     fetchUsers(); 
        //                 } else {
        //                     Swal.fire(
        //                         'Error!',
        //                         'Failed to delete the user. Please try again.',
        //                         'error'
        //                     );
        //                 }
        //             } catch (error) {
        //                 console.error('Error deleting user:', error);
        //                 Swal.fire(
        //                     'Error!',
        //                     'An unexpected error occurred.',
        //                     'error'
        //                 );
        //             }
        //         }
        //     });
        // }

        // Searching
        document.getElementById('search-box').addEventListener('input', function (e) {
            const searchQuery = e.target.value.toLowerCase();
            const tableRows = document.querySelectorAll('#user-table-body tr');

            tableRows.forEach(row => {

                const rowText = row.innerText.toLowerCase();
                if (rowText.includes(searchQuery)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });



        fetchUsers();



        // logout

        document.querySelector('.logout-button').addEventListener('click', async () => {
            try {
                const response = await fetch('/admin/adminlogout', { method: 'POST' });
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Logged Out',
                        text: 'You have been successfully logged out.',
                        confirmButtonText: 'OK',
                    }).then(() => {
                        window.location.href = '/admin';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Logout Failed',
                        text: 'Failed to log out. Please try again.',
                        confirmButtonText: 'OK',
                    });
                }
            } catch (error) {
                console.error('Error logging out:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Unexpected Error',
                    text: 'An unexpected error occurred. Please try again.',
                    confirmButtonText: 'OK',
                });
            }
        });


    </script>



    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</body>

</html>